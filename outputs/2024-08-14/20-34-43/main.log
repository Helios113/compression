[2024-08-14 20:34:45,460][flwr][INFO] - Starting Flower simulation, config: num_rounds=10, no round_timeout
[2024-08-14 20:34:54,135][flwr][INFO] - Flower VCE: Ray initialized with resources: {'node:128.232.115.66': 1.0, 'object_store_memory': 77216965017.0, 'accelerator_type:G': 1.0, 'GPU': 1.0, 'node:__internal_head__': 1.0, 'CPU': 56.0, 'memory': 170172918375.0}
[2024-08-14 20:34:54,137][flwr][INFO] - Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html
[2024-08-14 20:34:54,137][flwr][INFO] - Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 0.0}
[2024-08-14 20:34:54,182][flwr][INFO] - Flower VCE: Creating VirtualClientEngineActorPool with 28 actors
[2024-08-14 20:34:54,184][flwr][INFO] - [INIT]
[2024-08-14 20:34:54,184][flwr][INFO] - Requesting initial parameters from one random client
[2024-08-14 20:35:04,035][flwr][INFO] - Received initial parameters from one random client
[2024-08-14 20:35:04,036][flwr][INFO] - Evaluating initial global parameters
[2024-08-14 20:35:04,313][flwr][ERROR] - Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([1, 1, 10, 512]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([1, 1, 1, 10]) from checkpoint, the shape in current model is torch.Size([10]).
[2024-08-14 20:35:04,322][flwr][ERROR] - Traceback (most recent call last):
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/simulation/app.py", line 339, in start_simulation
    hist = run_fl(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 490, in run_fl
    hist, elapsed_time = server.fit(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 95, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/strategy/fedavg.py", line 167, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
  File "/nfs-share/pa511/resnet/server.py", line 35, in evaluate_fn
    model.load_state_dict(state_dict, strict=True)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1671, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 64]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 128]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 256]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([1, 1, 1, 512]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([1, 1, 10, 512]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([1, 1, 1, 10]) from checkpoint, the shape in current model is torch.Size([10]).

[2024-08-14 20:35:04,322][flwr][ERROR] - Your simulation crashed :(. This could be because of several reasons. The most common are: 
	 > Sometimes, issues in the simulation code itself can cause crashes. It's always a good idea to double-check your code for any potential bugs or inconsistencies that might be contributing to the problem. For example: 
		 - You might be using a class attribute in your clients that hasn't been defined.
		 - There could be an incorrect method call to a 3rd party library (e.g., PyTorch).
		 - The return types of methods in your clients/strategies might be incorrect.
	 > Your system couldn't fit a single VirtualClient: try lowering `client_resources`.
	 > All the actors in your pool crashed. This could be because: 
		 - You clients hit an out-of-memory (OOM) error and actors couldn't recover from it. Try launching your simulation with more generous `client_resources` setting (i.e. it seems {'num_cpus': 2, 'num_gpus': 0.0} is not enough for your run). Use fewer concurrent actors. 
		 - You were running a multi-node simulation and all worker nodes disconnected. The head node might still be alive but cannot accommodate any actor with resources: {'num_cpus': 2, 'num_gpus': 0.0}.
Take a look at the Flower simulation examples for guidance <https://flower.ai/docs/framework/how-to-run-simulations.html>.
