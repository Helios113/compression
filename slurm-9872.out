/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/hydra/_internal/defaults_list.py:251: UserWarning: In 'base': Defaults list is missing `_self_`. See https://hydra.cc/docs/1.2/upgrades/1.0_to_1.1/default_composition_order for more information
  warnings.warn(msg, UserWarning)
[92mINFO [0m:      Starting Flower simulation, config: num_rounds=10, no round_timeout
model:
  _target_: torchvision.models.resnet18
  num_classes: ${foo}
strategy:
  _target_: flwr.server.strategy.FedAvg
  fraction_fit: 1.0e-05
  min_fit_clients: ${num_clients_per_round_fit}
  fraction_evaluate: 1.0e-05
  min_evaluate_clients: ${num_clients_per_round_eval}
  min_available_clients: ${num_clients}
  on_fit_config_fn:
    _target_: server.get_on_fit_config
    config: ${config_fit}
foo: 10
num_rounds: 10
num_clients: 100
batch_size: 20
num_classes: 10
num_clients_per_round_fit: 10
num_clients_per_round_eval: 25
config_fit:
  lr: 0.01
  momentum: 0.9
  local_epochs: 1
method:
  name: fpzip
  precision: 0.1

Files already downloaded and verified
Files already downloaded and verified
[2024-08-14 20:38:17,272][flwr][INFO] - Starting Flower simulation, config: num_rounds=10, no round_timeout
2024-08-14 20:38:19,987	INFO worker.py:1752 -- Started a local Ray instance.
[92mINFO [0m:      Flower VCE: Ray initialized with resources: {'object_store_memory': 77207955456.0, 'memory': 170151896064.0, 'node:__internal_head__': 1.0, 'node:128.232.115.66': 1.0, 'CPU': 56.0, 'GPU': 1.0, 'accelerator_type:G': 1.0}
[2024-08-14 20:38:26,071][flwr][INFO] - Flower VCE: Ray initialized with resources: {'object_store_memory': 77207955456.0, 'memory': 170151896064.0, 'node:__internal_head__': 1.0, 'node:128.232.115.66': 1.0, 'CPU': 56.0, 'GPU': 1.0, 'accelerator_type:G': 1.0}
[92mINFO [0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html
[2024-08-14 20:38:26,072][flwr][INFO] - Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html
[92mINFO [0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 0.0}
[2024-08-14 20:38:26,073][flwr][INFO] - Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 0.0}
[92mINFO [0m:      Flower VCE: Creating VirtualClientEngineActorPool with 28 actors
[2024-08-14 20:38:26,106][flwr][INFO] - Flower VCE: Creating VirtualClientEngineActorPool with 28 actors
[92mINFO [0m:      [INIT]
[2024-08-14 20:38:26,108][flwr][INFO] - [INIT]
[92mINFO [0m:      Requesting initial parameters from one random client
[2024-08-14 20:38:26,108][flwr][INFO] - Requesting initial parameters from one random client
[33m(raylet)[0m [2024-08-14 20:38:29,876 E 3844082 3844112] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-08-14_20-38-17_375655_3843841 is over 95% full, available space: 15733813248; capacity: 2015100878848. Object creation will fail if spilling is required.
[36m(ClientAppActor pid=3847276)[0m [93mWARNING [0m:   DEPRECATED FEATURE: `client_fn` now expects a signature `def client_fn(context: Context)`.The provided `client_fn` has signature: {'cid': <Parameter "cid: str">}. You can import the `Context` like this: `from flwr.common import Context`
[36m(ClientAppActor pid=3847276)[0m 
[36m(ClientAppActor pid=3847276)[0m             This is a deprecated feature. It will be removed
[36m(ClientAppActor pid=3847276)[0m             entirely in future versions of Flower.
[36m(ClientAppActor pid=3847276)[0m         
[92mINFO [0m:      Received initial parameters from one random client
[36m(ClientAppActor pid=3847276)[0m comp_ratio [0.9369212962962963, 0.17578125, 0.1640625, 0.1640625, 0.17578125, 3.5, 0.9287787543402778, 0.17578125, 0.1640625, 0.1640625, 0.17578125, 3.5, 0.9277750651041666, 0.17578125, 0.1640625, 0.1640625, 0.17578125, 3.5, 0.9280124240451388, 0.17578125, 0.1640625, 0.1640625, 0.17578125, 3.5, 0.92816162109375, 0.17578125, 0.1640625, 0.1640625, 0.17578125, 3.5, 0.9278632269965278, 0.09375, 0.0859375, 0.0859375, 0.09375, 3.5, 0.9276089138454862, 0.09375, 0.0859375, 0.0859375, 0.09375, 3.5, 0.929168701171875, 0.09375, 0.0859375, 0.0859375, 0.09375, 3.5, 0.9274885389539931, 0.09375, 0.0859375, 0.0859375, 0.09375, 3.5, 0.9275495741102431, 0.09375, 0.0859375, 0.0859375, 0.09375, 3.5, 0.9274334377712674, 0.048828125, 0.044921875, 0.044921875, 0.048828125, 3.5, 0.9275987413194444, 0.048828125, 0.044921875, 0.044921875, 0.048828125, 3.5, 0.9260711669921875, 0.048828125, 0.044921875, 0.044921875, 0.048828125, 3.5, 0.9274626837836372, 0.048828125, 0.044921875, 0.044921875, 0.048828125, 3.5, 0.9274703131781684, 0.048828125, 0.044921875, 0.044921875, 0.048828125, 3.5, 0.9273552364773221, 0.02587890625, 0.0234375, 0.0234375, 0.02587890625, 3.5, 0.9275065528021919, 0.02587890625, 0.0234375, 0.0234375, 0.02587890625, 3.5, 0.9255790710449219, 0.02587890625, 0.0234375, 0.0234375, 0.02587890625, 3.5, 0.927424324883355, 0.02587890625, 0.0234375, 0.0234375, 0.02587890625, 3.5, 0.9274310006035699, 0.02587890625, 0.0234375, 0.0234375, 0.02587890625, 3.5, 0.92900390625, 1.65]
[36m(ClientAppActor pid=3847276)[0m reconstruction_loss [6.438841819763184, 0.0, 0.0, 0.0, 0.0, 0.0, 6.502552032470703, 0.0, 0.0, 0.0, 0.0, 0.0, 6.539529323577881, 0.0, 0.0, 0.0, 0.0, 0.0, 6.553685188293457, 0.0, 0.0, 0.0, 0.0, 0.0, 6.519745349884033, 0.0, 0.0, 0.0, 0.0, 0.0, 9.200361251831055, 0.0, 0.0, 0.0, 0.0, 0.0, 9.186985969543457, 0.0, 0.0, 0.0, 0.0, 0.0, 9.29749584197998, 0.0, 0.0, 0.0, 0.0, 0.0, 9.230618476867676, 0.0, 0.0, 0.0, 0.0, 0.0, 9.25500774383545, 0.0, 0.0, 0.0, 0.0, 0.0, 13.090081214904785, 0.0, 0.0, 0.0, 0.0, 0.0, 13.069438934326172, 0.0, 0.0, 0.0, 0.0, 0.0, 12.954961776733398, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0673189163208, 0.0, 0.0, 0.0, 0.0, 0.0, 13.058894157409668, 0.0, 0.0, 0.0, 0.0, 0.0, 18.484256744384766, 0.0, 0.0, 0.0, 0.0, 0.0, 18.46997833251953, 0.0, 0.0, 0.0, 0.0, 0.0, 18.50959587097168, 0.0, 0.0, 0.0, 0.0, 0.0, 18.477750778198242, 0.0, 0.0, 0.0, 0.0, 0.0, 18.478242874145508, 0.0, 0.0, 0.0, 0.0, 0.0, 184.897705078125, 0.25198161602020264]
[2024-08-14 20:38:35,932][flwr][INFO] - Received initial parameters from one random client
[92mINFO [0m:      Evaluating initial global parameters
[2024-08-14 20:38:35,933][flwr][INFO] - Evaluating initial global parameters
[91mERROR [0m:     Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([10, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([10, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([10]).
[2024-08-14 20:38:36,240][flwr][ERROR] - Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([10, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([10, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([10]).
[91mERROR [0m:     Traceback (most recent call last):
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/simulation/app.py", line 339, in start_simulation
    hist = run_fl(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 490, in run_fl
    hist, elapsed_time = server.fit(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 95, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/strategy/fedavg.py", line 167, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
  File "/nfs-share/pa511/resnet/server.py", line 35, in evaluate_fn
    model.load_state_dict(state_dict, strict=True)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1671, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
[2024-08-14 20:38:36,252][flwr][ERROR] - Traceback (most recent call last):
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/simulation/app.py", line 339, in start_simulation
    hist = run_fl(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 490, in run_fl
    hist, elapsed_time = server.fit(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 95, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/strategy/fedavg.py", line 167, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
  File "/nfs-share/pa511/resnet/server.py", line 35, in evaluate_fn
    model.load_state_dict(state_dict, strict=True)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1671, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([10, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([10, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([10]).

[91mERROR [0m:     Your simulation crashed :(. This could be because of several reasons. The most common are: 
	 > Sometimes, issues in the simulation code itself can cause crashes. It's always a good idea to double-check your code for any potential bugs or inconsistencies that might be contributing to the problem. For example: 
		 - You might be using a class attribute in your clients that hasn't been defined.
		 - There could be an incorrect method call to a 3rd party library (e.g., PyTorch).
		 - The return types of methods in your clients/strategies might be incorrect.
	 > Your system couldn't fit a single VirtualClient: try lowering `client_resources`.
	 > All the actors in your pool crashed. This could be because: 
		 - You clients hit an out-of-memory (OOM) error and actors couldn't recover from it. Try launching your simulation with more generous `client_resources` setting (i.e. it seems {'num_cpus': 2, 'num_gpus': 0.0} is not enough for your run). Use fewer concurrent actors. 
		 - You were running a multi-node simulation and all worker nodes disconnected. The head node might still be alive but cannot accommodate any actor with resources: {'num_cpus': 2, 'num_gpus': 0.0}.
Take a look at the Flower simulation examples for guidance <https://flower.ai/docs/framework/how-to-run-simulations.html>.
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([10, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([10, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([10]).

[2024-08-14 20:38:36,252][flwr][ERROR] - Your simulation crashed :(. This could be because of several reasons. The most common are: 
	 > Sometimes, issues in the simulation code itself can cause crashes. It's always a good idea to double-check your code for any potential bugs or inconsistencies that might be contributing to the problem. For example: 
		 - You might be using a class attribute in your clients that hasn't been defined.
		 - There could be an incorrect method call to a 3rd party library (e.g., PyTorch).
		 - The return types of methods in your clients/strategies might be incorrect.
	 > Your system couldn't fit a single VirtualClient: try lowering `client_resources`.
	 > All the actors in your pool crashed. This could be because: 
		 - You clients hit an out-of-memory (OOM) error and actors couldn't recover from it. Try launching your simulation with more generous `client_resources` setting (i.e. it seems {'num_cpus': 2, 'num_gpus': 0.0} is not enough for your run). Use fewer concurrent actors. 
		 - You were running a multi-node simulation and all worker nodes disconnected. The head node might still be alive but cannot accommodate any actor with resources: {'num_cpus': 2, 'num_gpus': 0.0}.
Take a look at the Flower simulation examples for guidance <https://flower.ai/docs/framework/how-to-run-simulations.html>.
Error executing job with overrides: []
Traceback (most recent call last):
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/simulation/app.py", line 339, in start_simulation
    hist = run_fl(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 490, in run_fl
    hist, elapsed_time = server.fit(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/server.py", line 95, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/server/strategy/fedavg.py", line 167, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
  File "/nfs-share/pa511/resnet/server.py", line 35, in evaluate_fn
    model.load_state_dict(state_dict, strict=True)
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1671, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for ResNet:
	size mismatch for bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([64, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for layer1.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.0.shortcut.1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([128, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for layer2.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.0.shortcut.1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([256, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for layer3.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.0.shortcut.1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.0.shortcut.1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn1.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([512, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for layer4.1.bn2.num_batches_tracked: copying a param with shape torch.Size([1, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([]).
	size mismatch for linear.weight: copying a param with shape torch.Size([10, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([10, 512]).
	size mismatch for linear.bias: copying a param with shape torch.Size([10, 1, 1, 1]) from checkpoint, the shape in current model is torch.Size([10]).

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "main.py", line 63, in main
    history = fl.simulation.start_simulation(
  File "/nfs-share/pa511/.cache/pypoetry/virtualenvs/advanced-pytorch-4G2CGpb3-py3.8/lib/python3.8/site-packages/flwr/simulation/app.py", line 375, in start_simulation
    raise RuntimeError("Simulation crashed.") from ex
RuntimeError: Simulation crashed.

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
[33m(raylet)[0m [2024-08-14 20:38:39,885 E 3844082 3844112] (raylet) file_system_monitor.cc:111: /tmp/ray/session_2024-08-14_20-38-17_375655_3843841 is over 95% full, available space: 15733731328; capacity: 2015100878848. Object creation will fail if spilling is required.
srun: error: ngongotaha: task 0: Exited with exit code 1
